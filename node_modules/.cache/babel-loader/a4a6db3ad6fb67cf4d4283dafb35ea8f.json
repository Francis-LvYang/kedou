{"ast":null,"code":"import CryptoJS from \"crypto-js\"; // 去空格\n\nexport function replaceSpace(str) {\n  if (typeof str !== 'string') return null;\n  return str.replace(/\\s/g, \"\");\n}\nexport function b64EncodeUnicode(str) {\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  }));\n}\n\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n} // 参数加密\n\n\nexport function encrypt(data) {\n  let postData = JSON.stringify(data);\n  let srcs = CryptoJS.enc.Utf8.parse(postData);\n  let encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(\"MUGNHU3FG5RE8F4F\"), {\n    iv: CryptoJS.enc.Utf8.parse(\"0ELFZI7HPQT1OW4L\"),\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  let postDataHexStr = CryptoJS.enc.Hex.parse(encrypted.ciphertext.toString().toUpperCase());\n  let postDataEnd = CryptoJS.enc.Base64.stringify(postDataHexStr);\n  let str = b64EncodeUnicode(postDataEnd);\n  return str;\n} // 参数解密\n\nexport function crypt(data) {\n  let base64data = b64DecodeUnicode(data);\n  let decrypt = CryptoJS.AES.decrypt(base64data, CryptoJS.enc.Utf8.parse(\"MUGNHU3FG5RE8F4F\"), {\n    iv: CryptoJS.enc.Utf8.parse(\"0ELFZI7HPQT1OW4L\"),\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  let decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);\n  return decryptedStr.toString();\n}","map":{"version":3,"sources":["/Users/gaomengzhou/Projects/kedou/src/utils/base.js"],"names":["CryptoJS","replaceSpace","str","replace","b64EncodeUnicode","btoa","encodeURIComponent","match","p1","String","fromCharCode","b64DecodeUnicode","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","encrypt","data","postData","JSON","stringify","srcs","enc","Utf8","parse","encrypted","AES","iv","mode","CBC","padding","pad","Pkcs7","postDataHexStr","Hex","ciphertext","toUpperCase","postDataEnd","Base64","crypt","base64data","decrypt","decryptedStr"],"mappings":"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","sourcesContent":["import CryptoJS  from \"crypto-js\";\n\n\n// 去空格\nexport function replaceSpace(str){\n   if(typeof(str)!=='string') return null;\n    return str.replace(/\\s/g,\"\");\n}\n\nexport function b64EncodeUnicode(str) {\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n        return String.fromCharCode('0x' + p1);\n    }));\n}\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n}\n\n\n// 参数加密\nexport function encrypt(data){ \n    let postData = JSON.stringify(data);\n    let srcs = CryptoJS.enc.Utf8.parse(postData);\n    let encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(\"MUGNHU3FG5RE8F4F\"), { iv: CryptoJS.enc.Utf8.parse(\"0ELFZI7HPQT1OW4L\"),mode:CryptoJS.mode.CBC,padding: CryptoJS.pad.Pkcs7});\n    let postDataHexStr = CryptoJS.enc.Hex.parse(encrypted.ciphertext.toString().toUpperCase());\n    let postDataEnd = CryptoJS.enc.Base64.stringify(postDataHexStr);\n    let str = b64EncodeUnicode(postDataEnd);\n    return str;\n}\n\n// 参数解密\nexport function  crypt(data){\n    let base64data = b64DecodeUnicode(data);\n    let decrypt = CryptoJS.AES.decrypt(base64data, CryptoJS.enc.Utf8.parse(\"MUGNHU3FG5RE8F4F\"), { iv: CryptoJS.enc.Utf8.parse(\"0ELFZI7HPQT1OW4L\"),mode:CryptoJS.mode.CBC,padding: CryptoJS.pad.Pkcs7});\n    let decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);\n    return decryptedStr.toString();\n}\n\n"]},"metadata":{},"sourceType":"module"}