{"ast":null,"code":"import \"antd-mobile/lib/toast/style/css\";\nimport _Toast from \"antd-mobile/lib/toast\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport { crypt, encrypt } from './base';\nexport function initAxios() {\n  const instance = axios.create({\n    baseURL: '/kedou/api',\n    timeout: 15000,\n    withCredentials: true,\n    // 设置全局的请求次数，请求的间隙\n    retry: 3,\n    retryDelay: 1000\n  });\n  instance.interceptors.request.use(config => {\n    _Toast.loading('加载中...', 0);\n\n    const method = config.method,\n          _config$url = config.url,\n          url = _config$url === void 0 ? '' : _config$url;\n\n    if (method === 'get' && url && !url.includes('timestamp')) {\n      const timestamp = new Date().getTime();\n\n      if (url.includes('?')) {\n        config.url = `${url}&timestamp=${timestamp}`;\n      } else {\n        config.url = `${url}?timestamp=${timestamp}`;\n      }\n    }\n\n    if (config.method === 'post') {\n      const encryptData = encrypt(config.data);\n      config.data = qs.stringify({\n        info: encryptData\n      });\n    }\n\n    return config;\n  }); // Add a response interceptor\n\n  instance.interceptors.response.use(async response => {\n    _Toast.hide();\n\n    const result = response.data.result; // console.log(response.data);\n\n    if (response.data.code !== 0 || !response.data.result.length) {\n      return response.data;\n    }\n\n    return JSON.parse(crypt(result));\n  }, async err => {\n    console.log(err);\n  });\n  return instance;\n}","map":{"version":3,"sources":["/Users/gaomengzhou/Projects/kedou/src/utils/request.js"],"names":["axios","qs","crypt","encrypt","initAxios","instance","create","baseURL","timeout","withCredentials","retry","retryDelay","interceptors","request","use","config","loading","method","url","includes","timestamp","Date","getTime","encryptData","data","stringify","info","response","hide","result","code","length","JSON","parse","err","console","log"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,QAA/B;AACA,OAAO,SAASC,SAAT,GAAqB;AAC1B,QAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC5BC,IAAAA,OAAO,EAAE,YADmB;AAE5BC,IAAAA,OAAO,EAAE,KAFmB;AAG5BC,IAAAA,eAAe,EAAE,IAHW;AAI5B;AACAC,IAAAA,KAAK,EAAE,CALqB;AAM5BC,IAAAA,UAAU,EAAE;AANgB,GAAb,CAAjB;AAQAN,EAAAA,QAAQ,CAACO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;AAC5C,WAAMC,OAAN,CAAc,QAAd,EAAwB,CAAxB;;AAD4C,UAG1CC,MAH0C,GAKxCF,MALwC,CAG1CE,MAH0C;AAAA,wBAKxCF,MALwC,CAI1CG,GAJ0C;AAAA,UAI1CA,GAJ0C,4BAIpC,EAJoC;;AAM5C,QAAID,MAAM,KAAK,KAAX,IAAoBC,GAApB,IAA2B,CAACA,GAAG,CAACC,QAAJ,CAAa,WAAb,CAAhC,EAA2D;AACzD,YAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AACA,UAAIJ,GAAG,CAACC,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACrBJ,QAAAA,MAAM,CAACG,GAAP,GAAc,GAAEA,GAAI,cAAaE,SAAU,EAA3C;AACD,OAFD,MAEO;AACLL,QAAAA,MAAM,CAACG,GAAP,GAAc,GAAEA,GAAI,cAAaE,SAAU,EAA3C;AACD;AACF;;AACD,QAAIL,MAAM,CAACE,MAAP,KAAkB,MAAtB,EAA8B;AAC5B,YAAMM,WAAW,GAAGpB,OAAO,CAACY,MAAM,CAACS,IAAR,CAA3B;AACAT,MAAAA,MAAM,CAACS,IAAP,GAAcvB,EAAE,CAACwB,SAAH,CAAa;AACzBC,QAAAA,IAAI,EAAEH;AADmB,OAAb,CAAd;AAGD;;AAED,WAAOR,MAAP;AACD,GAtBD,EAT0B,CAkC1B;;AACAV,EAAAA,QAAQ,CAACO,YAAT,CAAsBe,QAAtB,CAA+Bb,GAA/B,CAAmC,MAAOa,QAAP,IAAoB;AACrD,WAAMC,IAAN;;AADqD,UAGnDC,MAHmD,GAIjDF,QAAQ,CAACH,IAJwC,CAGnDK,MAHmD,EAMrD;;AACA,QAAIF,QAAQ,CAACH,IAAT,CAAcM,IAAd,KAAuB,CAAvB,IAA4B,CAACH,QAAQ,CAACH,IAAT,CAAcK,MAAd,CAAqBE,MAAtD,EAA8D;AAC5D,aAAOJ,QAAQ,CAACH,IAAhB;AACD;;AACD,WAAOQ,IAAI,CAACC,KAAL,CAAW/B,KAAK,CAAC2B,MAAD,CAAhB,CAAP;AACD,GAXD,EAWG,MAAOK,GAAP,IAAe;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAbD;AAeA,SAAO7B,QAAP;AACD","sourcesContent":["import { Toast } from 'antd-mobile';\nimport axios from 'axios';\nimport qs from 'qs';\nimport { crypt, encrypt } from './base';\nexport function initAxios() {\n  const instance = axios.create({\n    baseURL: '/kedou/api',\n    timeout: 15000,\n    withCredentials: true,\n    // 设置全局的请求次数，请求的间隙\n    retry: 3,\n    retryDelay: 1000,\n  });\n  instance.interceptors.request.use((config) => {\n    Toast.loading('加载中...', 0)\n    const {\n      method,\n      url = '',\n    } = config;\n    if (method === 'get' && url && !url.includes('timestamp')) {\n      const timestamp = new Date().getTime();\n      if (url.includes('?')) {\n        config.url = `${url}&timestamp=${timestamp}`;\n      } else {\n        config.url = `${url}?timestamp=${timestamp}`;\n      }\n    }\n    if (config.method === 'post') {\n      const encryptData = encrypt(config.data);\n      config.data = qs.stringify({\n        info: encryptData\n      });\n    }\n\n    return config;\n  });\n\n\n  // Add a response interceptor\n  instance.interceptors.response.use(async (response) => {\n    Toast.hide()\n    const {\n      result\n    } = response.data;\n\n    // console.log(response.data);\n    if (response.data.code !== 0 || !response.data.result.length) {\n      return response.data\n    }\n    return JSON.parse(crypt(result));\n  }, async (err) => {\n    console.log(err);\n  });\n\n  return instance;\n}\n"]},"metadata":{},"sourceType":"module"}